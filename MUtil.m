(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



BeginPackage["MUtil`"];


subdivTd::usage="
subdivTd[td,wSmall,wLarge]
do it with Identity
subdivTd[td,wSmall,wLarge,fun]
do it with fun
";

table2Dataset::usage="
table2Dataset[table] converts table into Dataset with the first row as header.
";



Begin["`Private`"]


Clear[subdivTd]
(*sub-divide TemporalData into small windwows within large windows;
e.g., monthly climatology of diurnal cycles*)
subdivTd[td_TemporalData,wSmall_,wLarge_,fun_:Identity]:=
Module[{subSmall,subLarge,timeSmall},
(*first, aggregate into small windows*)
subSmall=TimeSeriesAggregate[td,wSmall,Identity];
timeSmall=td["Dates"][[{1,subSmall["ValueDimensions"]/.{h_,l_}:>h}]];
(*first, aggregate into large windows; 
N.B., Hold for wrapping data of different dimensions between different large windows*)
subLarge=TimeSeriesAggregate[subSmall,wLarge,Hold];
(*thread `fun` over values of small windows within a large window*)
TimeSeriesMap[TimeSeriesThread[fun,TemporalData[#/.Hold->Identity,timeSmall]]&,subLarge]
]


Clear[table2Dataset]
table2Dataset[table_List]:=
Module[{ds,rawdata,header},
header=table[[1]];
rawdata=Transpose@table[[2;;-1]];
Dataset@Transpose@Dataset@AssociationThread[header->rawdata]
]


End[]


EndPackage[]
